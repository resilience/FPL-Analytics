# Get folder location

# get folder paths for all folders inside select folder

# for each path and 'gw' and run collection

import tkinter as tk
import tkinter.filedialog
import pandas as pd
import datetime
import os
import time
# BigQuery Configuration."""
from os import environ
from google.cloud import bigquery


# Google BigQuery config

os.environ['GOOGLE_APPLICATION_CREDENTIALS'] = 'G:\Hunt Systems\FPL-Analytics\mykey.json'
gcp_credentials = os.environ['GOOGLE_APPLICATION_CREDENTIALS'] = 'G:\Hunt Systems\FPL-Analytics\mykey.json'
print(gcp_credentials)

client = bigquery.Client(project='fpl-production')
dataset_id = 'fpl-production:fantasy_data'
table = client.get_table('fantasy_data.performances')


# init TK
root = tk.Tk()
root.withdraw()

# Output file names
dt = str(datetime.datetime.today().strftime(" %B %d %Y "))
storage = "" + dt + " storage "
outputName = 'dispositions_dataset'

#           what is currently wrong?
#                   total_points wasn't being pushed        fixed
#                   ids are being pushed, instead of retrieved and autogenerated.
#
#                     TO DO:
#            # Add bulk duplication checking         currently it queries one id at a time, which is slow
#            # Integrate DBT
#            # Retrieve ID from players table, if not assign new ID
#
def checkDuplicate(performanceID):

    query = """
        SELECT performanceID
        FROM `fantasy_data.performances`
        WHERE performanceID = @performanceID
    """
    job_config = bigquery.QueryJobConfig(
        query_parameters=[
            bigquery.ScalarQueryParameter("performanceID", "STRING", performanceID)
        ]
    )
    query_job = client.query(query, job_config=job_config)

    for result in query_job:
        if result is None:
            return result

def pushToBigQuery(rows_to_insert, schema):
    errors = client.insert_rows(
        table, rows_to_insert, selected_fields=schema
    )
    for error in errors:
        print(error)
    if not errors:
        print('New Rows have been added')

def getPlayerID(first_name, last_name):
    print('Getting playerID... ')
    query = """
            SELECT playerID
            FROM `fantasy_data.players`
            WHERE first_name = @first_name and last_name = @last_name
            LIMIT 1
        """
    job_config = bigquery.QueryJobConfig(
        query_parameters=[
            bigquery.ScalarQueryParameter("first_name", "STRING", first_name),
            bigquery.ScalarQueryParameter("last_name", "STRING", last_name)
        ]
    )
    query_job = client.query(query, job_config=job_config)
    results = query_job.result()
    print('results: ', results)
    for result in results:
        playerID = result["playerID"]
        print(playerID)
    if results.total_rows == 0:
            print('assigning new id...')
            query = """
                        SELECT max(playerID) as playerID
                        FROM `fantasy_data.players`
                        LIMIT 1
                    """
            query_job = client.query(query)
            results = query_job.result()
            for result in results:
                maxID = result["playerID"]
                print('maxID: ', maxID)
                playerID = maxID + 1
                print(playerID)


            return playerID

    return playerID



def playerHistory():

    dir = 'G:/Hunt Systems/FPL-Analytics/Fantasy-Premier-League-master/Fantasy-Premier-League-master/data'
    file_path = tk.filedialog.askdirectory(initialdir=dir, title="Select folder")
    directory = os.path.split(file_path)[0]
    print(directory)
    subdirectories = [x[0] for x in os.walk(directory)]
    s = 0
    for sub in subdirectories:
        s = s + 1
        if s < 2:
            season = sub.split('/', 6)[6]
            print('Season: ', season)
            season_start = int(season.split('-', 1)[0])
            print('Season Start: ', season_start)
            season_end = season_start + 1
            print('Season End: ', season_end)
            season_start = str(season_start)
            season_end = str(season_end)
        elif s < 5:
            print(sub)
        else:
            gameweekpath = sub +'\gw.csv'
            print(gameweekpath)
            with open(gameweekpath, encoding='utf8', errors='surrogateescape') as input, open(storage + '.csv', 'w',
                                                                                           encoding='utf8') as output:
                non_blank = (line for line in input if line.strip())
                output.writelines(non_blank)

            k = 0
            # ----------- Loops through each line -----------------------------------------
            #

            with open(storage + '.csv', encoding='utf8') as f:
                rows_to_insert = []
                i = 0

                for line in f:
                    line = line.replace('\n', '')
                    k = k + 1
                    if k == 1:
                        print('headers: ', line)
                        i = i + 1

                    else:
                        i = i + 1
                        row = line
                        sep = ","

                        if i == 2:
                            foldersep = '_'
                            path = sub
                            fullname = os.path.basename(path)
                            first_name = fullname.split(foldersep, 1)[0]
                            last_name_and_code = fullname.split(foldersep, 1)[1]
                            last_name = last_name_and_code.split(foldersep, 1)[0]
                            retrieveID = getPlayerID(first_name, last_name)
                            print('playerID: ', retrieveID)
                            playerID = retrieveID
                        else:
                            foldersep = '_'
                            path = sub
                            fullname = os.path.basename(path)
                            first_name = fullname.split(foldersep, 1)[0]
                            last_name_and_code = fullname.split(foldersep, 1)[1]
                            last_name = last_name_and_code.split(foldersep, 1)[0]
                            playerID = retrieveID

                        try:

                            assists = row.split(sep, 1)[0]
                            data = row.split(sep, 1)[1]

                            c1 = row.split(sep, 1)[0]
                            data = data.split(sep, 1)[1]

                            c2 = data.split(sep, 1)[0]
                            data = data.split(sep, 1)[1]

                            c3 = data.split(sep, 1)[0]
                            data = data.split(sep, 1)[1]

                            bonus = data.split(sep, 1)[0]
                            data = data.split(sep, 1)[1]

                            bps = data.split(sep, 1)[0]
                            data = data.split(sep, 1)[1]

                            clean_sheets = data.split(sep, 1)[0]
                            data = data.split(sep, 1)[1]

                            c4 = data.split(sep, 1)[0]
                            data = data.split(sep, 1)[1]

                            c5 = data.split(sep, 1)[0]
                            data = data.split(sep, 1)[1]

                            creativity = data.split(sep, 1)[0]
                            data = data.split(sep, 1)[1]

                            c6 = data.split(sep, 1)[0]
                            data = data.split(sep, 1)[1]

                            c7 = data.split(sep, 1)[0]
                            data = data.split(sep, 1)[1]

                            element = int(data.split(sep, 1)[0])
                            data = data.split(sep, 1)[1]

                            c8 = data.split(sep, 1)[0]
                            data = data.split(sep, 1)[1]

                            c9 = data.split(sep, 1)[0]
                            data = data.split(sep, 1)[1]

                            fixture = data.split(sep, 1)[0]
                            data = data.split(sep, 1)[1]

                            c10 = data.split(sep, 1)[0]
                            data = data.split(sep, 1)[1]

                            goals_conceded = data.split(sep, 1)[0]
                            data = data.split(sep, 1)[1]
                            goals_scored = data.split(sep, 1)[0]
                            data = data.split(sep, 1)[1]

                            ict_index = data.split(sep, 1)[0]
                            data = data.split(sep, 1)[1]

                            c11 = data.split(sep, 1)[0]
                            data = data.split(sep, 1)[1]

                            influence = data.split(sep, 1)[0]
                            data = data.split(sep, 1)[1]

                            c12 = data.split(sep, 1)[0]
                            data = data.split(sep, 1)[1]

                            kickoff_at = data.split(sep, 1)[0]
                            data = data.split(sep, 1)[1]

                            c24 = data.split(sep, 1)[0]
                            data = data.split(sep, 1)[1]

                            c13 = data.split(sep, 1)[0]
                            data = data.split(sep, 1)[1]

                            c14 = data.split(sep, 1)[0]
                            data = data.split(sep, 1)[1]

                            minutes = data.split(sep, 1)[0]
                            data = data.split(sep, 1)[1]
                            print('minutes: ',minutes)
                            c15 = data.split(sep, 1)[0]
                            data = data.split(sep, 1)[1]

                            c16 = data.split(sep, 1)[0]
                            data = data.split(sep, 1)[1]

                            opponent_teamID = data.split(sep, 1)[0]
                            data = data.split(sep, 1)[1]

                            own_goals = data.split(sep, 1)[0]
                            data = data.split(sep, 1)[1]

                            c23 = data.split(sep, 1)[0]
                            data = data.split(sep, 1)[1]

                            penalties_missed = data.split(sep, 1)[0]
                            data = data.split(sep, 1)[1]

                            penalties_saved = data.split(sep, 1)[0]
                            data = data.split(sep, 1)[1]

                            c17 = data.split(sep, 1)[0]
                            data = data.split(sep, 1)[1]

                            red_cards = data.split(sep, 1)[0]
                            data = data.split(sep, 1)[1]

                            gameweek = data.split(sep, 1)[0]
                            data = data.split(sep, 1)[1]

                            saves = data.split(sep, 1)[0]
                            data = data.split(sep, 1)[1]

                            selected = data.split(sep, 1)[0]
                            data = data.split(sep, 1)[1]
                            print('gameweek: ',gameweek)
                            c18 = data.split(sep, 1)[0]
                            data = data.split(sep, 1)[1]

                            c19 = data.split(sep, 1)[0]
                            data = data.split(sep, 1)[1]

                            c20 = data.split(sep, 1)[0]
                            data = data.split(sep, 1)[1]

                            team_a_scored = data.split(sep, 1)[0]
                            data = data.split(sep, 1)[1]

                            team_h_scored = data.split(sep, 1)[0]
                            data = data.split(sep, 1)[1]

                            threat = data.split(sep, 1)[0]
                            data = data.split(sep, 1)[1]

                            total_points = data.split(sep, 1)[0]
                            data = data.split(sep, 1)[1]

                            transfers_balance = data.split(sep, 1)[0]
                            data = data.split(sep, 1)[1]

                            transfers_in = data.split(sep, 1)[0]
                            data = data.split(sep, 1)[1]

                            transfers_out = data.split(sep, 1)[0]
                            data = data.split(sep, 1)[1]

                            price = data.split(sep, 1)[0]
                            data = data.split(sep, 1)[1]
                            print('price ', price)
                            was_home = data.split(sep, 1)[0]
                            data = data.split(sep, 1)[1]

                            c21 = data.split(sep, 1)[0]
                            data = data.split(sep, 1)[1]

                            yellow_cards = data.split(sep, 1)[0]

                            performanceID = season_start + first_name + last_name + gameweek

                            #isDuplicate = checkDuplicate(performanceID)
                            #print('isDuplicate result: ',isDuplicate)
                            #if isDuplicate is None:
                            #    print(performanceID, ' is not a duplicate, adding to BigQuery')
                            #else:
                            #    print(performanceID, ' already exists in BigQuery')
                            #    break

                        except NameError as nE:
                            print('Name Error: ', nE)

                        schema = [
                            bigquery.SchemaField('performanceID', 'STRING', mode='REQUIRED'),
                            bigquery.SchemaField('playerID', 'INTEGER', mode='REQUIRED'),
                            bigquery.SchemaField('kickoff_at', 'TIMESTAMP', mode='REQUIRED'),
                            bigquery.SchemaField('season_start', 'INTEGER', mode='REQUIRED'),
                            bigquery.SchemaField('season_end', 'INTEGER', mode='REQUIRED'),
                            bigquery.SchemaField('first_name', 'STRING'),
                            bigquery.SchemaField('last_name', 'STRING'),
                            bigquery.SchemaField('gameweek', 'INT64'),
                            bigquery.SchemaField('price', 'FLOAT'),
                            bigquery.SchemaField('total_points', 'INT64'),
                            bigquery.SchemaField('assists', 'INT64'),
                            bigquery.SchemaField('goals_scored', 'INT64'),
                            bigquery.SchemaField('goals_conceded', 'INT64'),
                            bigquery.SchemaField('own_goals', 'INT64'),
                            bigquery.SchemaField('penalties_missed', 'INT64'),
                            bigquery.SchemaField('penalties_saved', 'INT64'),
                            bigquery.SchemaField('bonus', 'INT64'),
                            bigquery.SchemaField('bps', 'INT64'),
                            bigquery.SchemaField('clean_sheets', 'INT64'),
                            bigquery.SchemaField('minutes', 'INT64'),
                            bigquery.SchemaField('ict_index', 'FLOAT'),
                            bigquery.SchemaField('creativity', 'FLOAT'),
                            bigquery.SchemaField('influence', 'FLOAT'),
                            bigquery.SchemaField('threat', 'FLOAT'),
                            bigquery.SchemaField('red_cards', 'INT64'),
                            bigquery.SchemaField('yellow_cards', 'INT64'),
                            bigquery.SchemaField('saves', 'INT64'),
                            bigquery.SchemaField('team_a_scored', 'INT64'),
                            bigquery.SchemaField('team_h_scored', 'INT64'),
                            bigquery.SchemaField('transfers_balance', 'INT64'),
                            bigquery.SchemaField('transfers_in', 'INT64'),
                            bigquery.SchemaField('transfers_out', 'INT64'),
                            bigquery.SchemaField('was_home', 'BOOLEAN'),
                            bigquery.SchemaField('opponent_teamID', 'INT64'),
                            bigquery.SchemaField('selected', 'INT64'),
                        ]
                        job_config = bigquery.LoadJobConfig()
                        job_config.schema = schema

                        try:

                            row = dict({
                                "performanceID": performanceID,
                                "playerID": playerID,
                                "kickoff_at": kickoff_at,
                                "season_start": season_start,
                                "season_end": season_end,
                                "first_name": first_name,
                                "last_name": last_name,
                                "gameweek": gameweek,
                                "price": price,
                                "total_points": total_points,
                                "assists": assists,
                                "goals_scored": goals_scored,
                                "goals_conceded": goals_conceded,
                                "own_goals": own_goals,
                                "penalties_missed": penalties_missed,
                                "penalties_saved": penalties_saved,
                                "bonus": bonus,
                                "bps": bps,
                                "clean_sheets": clean_sheets,
                                "minutes": minutes,
                                "ict_index": ict_index,
                                "creativity": creativity,
                                "influence": influence,
                                "threat": threat,
                                "red_cards": red_cards,
                                "yellow_cards": yellow_cards,
                                "saves": saves,
                                "team_a_scored": team_a_scored,
                                "team_h_scored": team_h_scored,
                                "transfers_balance": transfers_balance,
                                "transfers_in": transfers_in,
                                "transfers_out": transfers_out,
                                "was_home": was_home,
                                "opponent_teamID": opponent_teamID,
                                "selected": selected})


                            dict_copt = row.copy()
                            rows_to_insert.append(dict_copt)


                        except IndexError as error:
                            print(error)
                print('All performances parsed for player ', playerID)
                pushToBigQuery(rows_to_insert, schema)

playerHistory()